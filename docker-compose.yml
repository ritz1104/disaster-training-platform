version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: disaster-training-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-disaster-training}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./server/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - disaster-training-network

  # Redis Cache (for production)
  redis:
    image: redis:7-alpine
    container_name: disaster-training-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis-password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - disaster-training-network

  # Backend Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: disaster-training-server
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      MONGODB_URI: mongodb://admin:password@mongodb:27017/disaster-training?authSource=admin
      REDIS_URL: redis://:redis-password@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-change-in-production}
      CLIENT_URL: ${CLIENT_URL:-http://localhost:3000}
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./server/logs:/app/logs
      - ./server/uploads:/app/uploads
    networks:
      - disaster-training-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: disaster-training-client
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - server
    networks:
      - disaster-training-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (optional for scaling)
  nginx:
    image: nginx:alpine
    container_name: disaster-training-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - client
      - server
    networks:
      - disaster-training-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  disaster-training-network:
    driver: bridge